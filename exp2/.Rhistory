## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.75)
differenceB <-pToOr(.55)
twoWay <- pToOr(.95)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
d %>%
filter(trial == 25 | trial == 675) %>%
mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
facet_wrap(~trialCode) + ylim(0,1)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.75)
differenceB <-pToOr(.55)
twoWay <- pToOr(.95)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.95)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.71)
differenceB <-pToOr(.55)
twoWay <- pToOr(.95)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.71)
differenceB <-pToOr(.55)
twoWay <- pToOr(.90)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.71)
differenceB <-pToOr(.55)
twoWay <- pToOr(.85)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.71)
differenceB <-pToOr(.55)
twoWay <- pToOr(.80)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.71)
differenceB <-pToOr(.55)
twoWay <- pToOr(.84)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.71)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
library(tidyverse)
pToOr <- function(p){
return(log(p/(1-p)))
}
trial <- rep(1:700, 4)
difficulty <- c(rep(0, 1400), rep(1, 1400))
difference <- c(rep(c(rep(0, 700), rep(1, 700)), 2))
d <- data.frame(trial = trial, difficulty = difficulty, difference = difference)
## betas
## for some reason these values work but i have no idea why
intercept <- pToOr(.55)
difficultyB <- pToOr(.7)
differenceB <-pToOr(.55)
twoWay <- pToOr(.75)
intercept <- pToOr(.55)
difficultyB <- pToOr(.71)
differenceB <-pToOr(.55)
twoWay <- pToOr(.84)
bias <-1
d$proba <- with(d, (intercept*bias + difficulty*difficultyB*bias + difference*differenceB*bias + difficulty*difference*twoWay*bias) * (trial / 700))
d$proba <- exp(d$proba)/(1+exp(d$proba))
# d %>%
#   filter(trial == 25 | trial == 675) %>%
#   mutate(trialCode = ifelse(trial == 25, 'early', 'late')) %>%
#   ggplot(aes(x = difficulty, y = proba, group = factor(difference))) + geom_bar(stat = 'identity', aes(fill = factor(difference)), position = position_dodge(width=.9)) +
#   facet_wrap(~trialCode) + ylim(0,1)
#
d %>%
filter(trial == 700)
interceptFixed <- pToOr(.55)
difficultyFixed <- pToOr(.71)
differenceFixed <-pToOr(.55)
twoWayFixed <- pToOr(.84)
intercept
difficultyFixed
differenceFixed
twoWayFixed
q()
pToOr <- function(p){
return(log(p/(1-p)))
}
## FIXED EFFECTS
interceptFixed <- pToOr(.55)
difficultyFixed <- pToOr(.71)
differenceFixed <-pToOr(.55)
twoWayFixed <- pToOr(.84)
interceptFixed
difficultyFixed
differenceFixed
twoWayFixed
interceptRandom <- pToOr(.3)
difficultyRandom <- pToOr(.1)
differenceRandom <- pToOr(.1)
twoWayRandom <- pToOr(.1)
twoWayRandom
exo(1) / (1+exp(1))
exp(1) / (1+exp(1))
exp(1.5) / (1+exp(1.5))
d <- data.frame(l = -5:5)
d$p <- with(d, exp(l) / (1+exp(l)))
d %>%
libraray(tidyverse)
library(tidyverse)
d %>%
ggplot(aes(x = l, y = p)) + geom_line(size =2)
interceptFixed
difficultyFixed
differenceFixed
difficultyFixed - differenceFixed
1 - (difficultyFixed - differenceFixed)
700 /4
q()
x <- c('dave' = 3, 'john' = 4)
x
x['dave']
x['dave']+3
x$dave
x <- c(dave=4, john=5)
x
x['dave']
source('quickTest.r')
source('quickTest.R')
testMe()
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp2/powerSimulator.r')
## conditions
conditions <- data.frame(difference = c(rep(0, 2), rep(1, 2)), difficulty = rep(c(0, 1), 2))
conditions
700 / 4
## global vars
nTrials <- 700
## FIXED EFFECTS
interceptFixed <- .55
difficultyFixed <- .71
differenceFixed <-.55
twoWayFixed <- .84
## RANDOM EFFECTS
interceptRandom <- 3
difficultyRandom <- 1
differenceRandom <- 1 - (difficultyFixed - differenceFixed)
twoWayRandom <- 1
toLogOdds <- function(p){
return(log(p/(1-p)))
}
decision <- function(difference, difficulty, bias, trial, trialMax, subjectProfile) {
## takes as input difference [0, 1] and difficulty [0, 1]
## returns the probability of selecting the low-demand deck
## convert fixed effects to log odds
interceptFixed <- toLogOdds(interceptFixed)
difficultyFixed <- toLogOdds(difficultyFixed)
differenceFixed <-toLogOdds(differenceFixed)
twoWayFixed <- toLogOdds(twoWayFixed)
## within-subject noise
#noiseSd <- 0.25
noiseSd <- 0
## level 2 equations
intercept <- interceptFixed * bias + subjectProfile['subjectIntercept']
differenceB <- differenceFixed * bias + subjectProfile['subjectDifference']
difficultyB <- difficultyFixed * bias + subjectProfile['subjectDifficulty']
twoWayB <- twoWayFixed * bias + subjectProfile['subjectTwoWay']
## level 1 equation
proba <- (intercept + difference*differenceB + difficulty*difficultyB + difficulty*difference*twoWayB) * (trial / trialMax) + rnorm(1, 0, noiseSd)
proba <- exp(proba) / (1 + exp(proba))
return(proba)
}
buildSubjectProfile <- function() {
## RANDOM EFFECTS
interceptRandom <- 3
difficultyRandom <- 1
differenceRandom <- 1 - (difficultyFixed - differenceFixed)
twoWayRandom <- 1
subjectProfile <- c(subjectIntercept = rnorm(1, 0, interceptRandom), subjectDifficulty = rnorm(1, 0, difficultyRandom), subjectDifference = rnorm(1, 0, differenceRandom), subjectTwoWay = rnorm(1, 0, twoWayRandom))
return(subjectProfile)
}
library(ez)
library(tidyverse)
n <- 10
bias <- 0.5
nSims <- 1
oneShot <- ifelse(nSims == 1, 1, 0)
experimentResults <- data.frame(n = numeric(), bias = numeric(), effectSize = numeric(), pValue = numeric(), predictedDirection = logical())
write.csv(experimentResults, 'experimentResultsCache.csv', row.names = FALSE)
## first element is the intercept, mean 0.5 (choose randomly), sd controls variability in baseline preferences, constrained between 0:1
## second element is scalar to control size of the bias, centered at 1, floor of 0; bigger SD means more between-subject variability in size of the effect
subjectProfile <- buildSubjectProfile()
subjectProfile
## conditions
conditions <- data.frame(difference = c(rep(0, 2), rep(1, 2)), difficulty = rep(c(0, 1), 2))
experimentData <- data.frame(subject = numeric(), trial = numeric(), difference = factor(,levels=c('moderate','extreme')), difficulty = factor(, levels=c('easier', 'harder')), lowDemandSelection = numeric())
subject <- 1
for (conditionRow in 1:4) {
difficulty <- conditions[conditionRow,]$difficulty
difference <- conditions[conditionRow,]$difference
difficultyCode <- ifelse(difficulty, 'easier', 'harder')
differenceCode <- ifelse(difference, 'moderate', 'extreme')
count <- 0
trialIterator <- 1:(nTrials/4)
for (trial in trialIterator) {
count <- count + 1
## compute decision threshold
proba <- decision(difference = difference, difficulty = difficulty, bias = bias, trial = trial, trialMax = max(trialIterator), subjectProfile = subjectProfile)
## execute decision and save data
experimentData <- rbind(experimentData, data.frame(subject = subject, trial = count,
difference = differenceCode, difficulty = difficultyCode,
lowDemandSelection = ifelse(runif(1) < proba, 1, 0)))
}
}
experimentData
experimentData %>%
filter(trial == 175) %>%
ggplot(aes(x = difficultyCode, y = lowDemandSelection, group = differenceCode)) + geom_bar(stat = 'identity', aes(fill = differenceCode), position = position_dodge(width = .9))
experimentData %>%
filter(trial == 175)
experimentData %>%
filter(trial == 175) %>%
ggplot(aes(x = difficulty, y = lowDemandSelection, group = difference)) + geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9))
for (subject in 1:n){
## first element is the intercept, mean 0.5 (choose randomly), sd controls variability in baseline preferences, constrained between 0:1
## second element is scalar to control size of the bias, centered at 1, floor of 0; bigger SD means more between-subject variability in size of the effect
subjectProfile <- buildSubjectProfile()
## conditions
conditions <- data.frame(difference = c(rep(0, 2), rep(1, 2)), difficulty = rep(c(0, 1), 2))
for (conditionRow in 1:4) {
difficulty <- conditions[conditionRow,]$difficulty
difference <- conditions[conditionRow,]$difference
difficultyCode <- ifelse(difficulty, 'easier', 'harder')
differenceCode <- ifelse(difference, 'moderate', 'extreme')
count <- 0
trialIterator <- 1:(nTrials/4)
for (trial in trialIterator) {
count <- count + 1
## compute decision threshold
proba <- decision(difference = difference, difficulty = difficulty, bias = bias, trial = trial, trialMax = max(trialIterator), subjectProfile = subjectProfile)
## execute decision and save data
experimentData <- rbind(experimentData, data.frame(subject = subject, trial = count,
difference = differenceCode, difficulty = difficultyCode,
lowDemandSelection = ifelse(runif(1) < proba, 1, 0)))
}
}
## every 10 subjects, save out data to cache and reset experimentData data frame
if (subject %% 10 == 0 | subject == n){
experimentData <- rbind(read.csv('experimentDataCache.csv', header = TRUE), experimentData)
write.csv(experimentData, 'experimentDataCache.csv', row.names = FALSE)
print(paste('Subject: ', subject, ' of ', n, sep = ''))
if (subject != n){
experimentData <- data.frame(subject = numeric(), trial = numeric(), condition = character(), lowDemandSelection = numeric())
}
}
}
experimentData <- data.frame(subject = numeric(), trial = numeric(), difference = factor(,levels=c('moderate','extreme')), difficulty = factor(, levels=c('easier', 'harder')), lowDemandSelection = numeric())
write.csv(experimentData, 'experimentDataCache.csv', row.names = FALSE)
print(paste('Simulation', sim, 'of', nSims))
for (subject in 1:n){
## first element is the intercept, mean 0.5 (choose randomly), sd controls variability in baseline preferences, constrained between 0:1
## second element is scalar to control size of the bias, centered at 1, floor of 0; bigger SD means more between-subject variability in size of the effect
print(paste('subject;', subject))
subjectProfile <- buildSubjectProfile()
## conditions
conditions <- data.frame(difference = c(rep(0, 2), rep(1, 2)), difficulty = rep(c(0, 1), 2))
for (conditionRow in 1:4) {
difficulty <- conditions[conditionRow,]$difficulty
difference <- conditions[conditionRow,]$difference
difficultyCode <- ifelse(difficulty, 'easier', 'harder')
differenceCode <- ifelse(difference, 'moderate', 'extreme')
count <- 0
trialIterator <- 1:(nTrials/4)
for (trial in trialIterator) {
count <- count + 1
## compute decision threshold
proba <- decision(difference = difference, difficulty = difficulty, bias = bias, trial = trial, trialMax = max(trialIterator), subjectProfile = subjectProfile)
## execute decision and save data
experimentData <- rbind(experimentData, data.frame(subject = subject, trial = count,
difference = differenceCode, difficulty = difficultyCode,
lowDemandSelection = ifelse(runif(1) < proba, 1, 0)))
}
}
## every 10 subjects, save out data to cache and reset experimentData data frame
if (subject %% 10 == 0 | subject == n){
experimentData <- rbind(read.csv('experimentDataCache.csv', header = TRUE), experimentData)
write.csv(experimentData, 'experimentDataCache.csv', row.names = FALSE)
print(paste('Subject: ', subject, ' of ', n, sep = ''))
if (subject != n){
experimentData <- data.frame(subject = numeric(), trial = numeric(), condition = character(), lowDemandSelection = numeric())
}
}
} ## end subject loop
head(experimentData)
tail(experimentData)
experimentData %>%
filter(trial == 175) %>%
summarize(lds = mean(lowDemandSelection)) %>%
ggplot(aes(x = difficulty, y = lds, group = difference)) + geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width= .9))
experimentData %>%
filter(trial == 175) %>%
group_by(difficulty, difference) %>%
summarize(lds = mean(lowDemandSelection)) %>%
ggplot(aes(x = difficulty, y = lds, group = difference)) + geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width= .9))
experimentData %>%
filter(trial == 175) %>%
group_by(difficulty, difference) %>%
summarize(lds = mean(lowDemandSelection))
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp2/powerSimulator.r')
q()
