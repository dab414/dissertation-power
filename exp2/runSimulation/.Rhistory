proba <- riskyProba - safeProba + rnorm(1, 0, noiseSd)
proba <- exp(proba) / (1 + exp(proba))
return(proba)
}
d$proba <- decision(d$riskyCritical, d$safeCritical, 1, subjectProfile)
noiseSd <- 0
d$proba <- decision(d$riskyCritical, d$safeCritical, 1, subjectProfile)
head(d)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(~safeCritical)
decision <- function(riskyCritical, safeCritical, bias, subjectProfile) {
## takes as input all this stuff above
## returns the probability of choosing the reference deck
## Level 1 equation
## The flip side of the risky prospect (ie reference) will always be adding 0 value..
riskyProba <- subjectProfile['subjectIntercept'] + valueFunction(riskyCritical, bias, subjectProfile) * pWeightFunction(bias, subjectProfile)
safeProba <- subjectProfile['subjectIntercept'] + valueFunction(safeCritical, bias, subjectProfile)
proba <- safeProba - riskyProba + rnorm(1, 0, noiseSd)
proba <- exp(proba) / (1 + exp(proba))
return(proba)
}
d$proba <- decision(d$riskyCritical, d$safeCritical, 1, subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical)
conditions <- data.frame(difficulty = factor(c(rep('easier', 2), rep('harder', 2))),
difference = factor(rep(c('moderate', 'extreme'), 2)),
riskyCritical = c(4, 2, 12, 14),
safeCritical = c(6, 5, 10, 11))
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
conditions
.75-.5
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = .5, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = .2, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 0, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
exponentsFixed <- 1
lossAversionFixed <- 2
pWeightFixed <- .7
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
## TRUE PARAMETERS
#exponentsFixed <- .3
exponentsFixed <- .3
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
## TRUE PARAMETERS
#exponentsFixed <- .3
exponentsFixed <- .9
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical)
## TRUE PARAMETERS
#exponentsFixed <- .3
exponentsFixed <- 1
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
#pWeightFixed <- .7
pWeightFixed <- .5
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
exponentsFixed <- .3
#exponentsFixed <- 1
#lossAversionFixed <- 2
lossAversionFixed <- 1
#pWeightFixed <- .7
pWeightFixed <- .5
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
#pWeightFixed <- .7
#pWeightFixed <- .5
pWeightFixed <- 1
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
## TRUE PARAMETERS
exponentsFixed <- .8
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
#pWeightFixed <- .7
#pWeightFixed <- .5
pWeightFixed <- .5
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
convertBias(1, pWeightFixed)
pWeightFixed
pWeightFunction <- function(bias, subjectProfile) {
## The conceptual input to this function will always be 0.5
## The purpose of this function is to subjectively weight the probability as a function of both subject-level bias and the parametrically-manipulated bias
## Essentially the level 2 equation for the probability weight
discount <- max(min(pWeightFixed * bias + subjectProfile['subjectPWeight'], 1), 0)
return(0.5 * discount)
}
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
## TRUE PARAMETERS
exponentsFixed <- 1
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
library(tidyverse)
#exponentsRandom <- .2
exponentsRandom <- .42
lossAversionRandom <- .60
pWeightRandom <- .16
visualizeSubjectDifferences <- function(fixedEffect, effectName) {
## set the random effect in the environment
d <- data.frame(bias = seq(0, 1, .001))
d$trueParameter <- fixedEffect * convertBias(d$bias, fixedEffect)
d$finalParameter <- 0
subjectEffectName <- paste('subject', effectName, sep = '')
for (row in 1:nrow(d)) {
subjectProfile <- buildSubjectProfile()
if (effectName == 'LossAversion') {
d[row, 'finalParameter'] <- max(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
} else {
d[row, 'finalParameter'] <- max(min(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1), 0)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
}
}
return(data.frame(true = d$trueParameter, final = d$finalParameter))
}
fixedEffectContainer <- c(lossAversionFixed, exponentsFixed, pWeightFixed)
effectNameContainer <- c('LossAversion', 'Exponents', 'PWeight')
for (i in 1:3) {
if (i == 1) {
d <- visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i])
} else {
d <- cbind(d, visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i]))
}
}
colnames(d) <- c('lossAversion_True', 'lossAversion_Final', 'exponents_True', 'exponents_Final', 'pWeight_True', 'pWeight_Final')
cors <- with(d, c(cor = cor(exponents_True, exponents_Final), cor = cor(lossAversion_True, lossAversion_Final), cor = cor(pWeight_True, pWeight_Final)))
cors <- data.frame(parameter = c('Diminishing Sensitivity', 'Loss Aversion', 'Probability Weight'), Truth = round(cors, 2), xCoords = c(.9, 1.25, .95), yCoords = c(.1, 4.5, .5))
d %>%
mutate(id = 1:nrow(.)) %>%
gather(variable, value, lossAversion_True:pWeight_Final) %>%
separate(variable, c('parameter', 'boolean')) %>%
spread(boolean, value) %>%
rename(Truth = True) %>%
mutate(parameter = factor(parameter)) %>%
mutate(parameter = recode(parameter, 'lossAversion' = 'Loss Aversion', 'exponents' = 'Diminishing Sensitivity', 'pWeight' = 'Probability Weight')) %>%
ggplot(aes(x = Truth, y = Final)) +
geom_point() +
geom_smooth(method = 'lm', color = 'black') +
facet_wrap(~parameter, scales = 'free') +
geom_text(data = cors, aes(label = paste('r=', Truth, sep = ''), x = xCoords, y = yCoords), color = 'red', fontface='bold') +
xlab('True Parameter') +
ylab('Subject Parameter') +
theme_bw() +
theme(strip.background = element_rect(fill = 'white', color = 'black'))
## TRUE PARAMETERS
exponentsFixed <- .3
#exponentsFixed <- 1
#lossAversionFixed <- 2
lossAversionFixed <- 2
#pWeightFixed <- .7
#pWeightFixed <- .5
pWeightFixed <- .5
library(tidyverse)
#exponentsRandom <- .2
exponentsRandom <- .42
lossAversionRandom <- .60
pWeightRandom <- .16
visualizeSubjectDifferences <- function(fixedEffect, effectName) {
## set the random effect in the environment
d <- data.frame(bias = seq(0, 1, .001))
d$trueParameter <- fixedEffect * convertBias(d$bias, fixedEffect)
d$finalParameter <- 0
subjectEffectName <- paste('subject', effectName, sep = '')
for (row in 1:nrow(d)) {
subjectProfile <- buildSubjectProfile()
if (effectName == 'LossAversion') {
d[row, 'finalParameter'] <- max(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
} else {
d[row, 'finalParameter'] <- max(min(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1), 0)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
}
}
return(data.frame(true = d$trueParameter, final = d$finalParameter))
}
fixedEffectContainer <- c(lossAversionFixed, exponentsFixed, pWeightFixed)
effectNameContainer <- c('LossAversion', 'Exponents', 'PWeight')
for (i in 1:3) {
if (i == 1) {
d <- visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i])
} else {
d <- cbind(d, visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i]))
}
}
colnames(d) <- c('lossAversion_True', 'lossAversion_Final', 'exponents_True', 'exponents_Final', 'pWeight_True', 'pWeight_Final')
cors <- with(d, c(cor = cor(exponents_True, exponents_Final), cor = cor(lossAversion_True, lossAversion_Final), cor = cor(pWeight_True, pWeight_Final)))
cors <- data.frame(parameter = c('Diminishing Sensitivity', 'Loss Aversion', 'Probability Weight'), Truth = round(cors, 2), xCoords = c(.9, 1.25, .95), yCoords = c(.1, 4.5, .5))
d %>%
mutate(id = 1:nrow(.)) %>%
gather(variable, value, lossAversion_True:pWeight_Final) %>%
separate(variable, c('parameter', 'boolean')) %>%
spread(boolean, value) %>%
rename(Truth = True) %>%
mutate(parameter = factor(parameter)) %>%
mutate(parameter = recode(parameter, 'lossAversion' = 'Loss Aversion', 'exponents' = 'Diminishing Sensitivity', 'pWeight' = 'Probability Weight')) %>%
ggplot(aes(x = Truth, y = Final)) +
geom_point() +
geom_smooth(method = 'lm', color = 'black') +
facet_wrap(~parameter, scales = 'free') +
geom_text(data = cors, aes(label = paste('r=', Truth, sep = ''), x = xCoords, y = yCoords), color = 'red', fontface='bold') +
xlab('True Parameter') +
ylab('Subject Parameter') +
theme_bw() +
theme(strip.background = element_rect(fill = 'white', color = 'black'))
library(tidyverse)
#exponentsRandom <- .2
exponentsRandom <- .42
lossAversionRandom <- .60
pWeightRandom <- .16
visualizeSubjectDifferences <- function(fixedEffect, effectName) {
## set the random effect in the environment
d <- data.frame(bias = seq(0, 1, .001))
d$trueParameter <- fixedEffect * convertBias(d$bias, fixedEffect)
d$finalParameter <- 0
subjectEffectName <- paste('subject', effectName, sep = '')
for (row in 1:nrow(d)) {
subjectProfile <- buildSubjectProfile()
if (effectName == 'LossAversion') {
d[row, 'finalParameter'] <- max(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
} else {
d[row, 'finalParameter'] <- max(min(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1), 0)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
}
}
return(data.frame(true = d$trueParameter, final = d$finalParameter))
}
fixedEffectContainer <- c(lossAversionFixed, exponentsFixed, pWeightFixed)
effectNameContainer <- c('LossAversion', 'Exponents', 'PWeight')
for (i in 1:3) {
if (i == 1) {
d <- visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i])
} else {
d <- cbind(d, visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i]))
}
}
colnames(d) <- c('lossAversion_True', 'lossAversion_Final', 'exponents_True', 'exponents_Final', 'pWeight_True', 'pWeight_Final')
cors <- with(d, c(cor = cor(exponents_True, exponents_Final), cor = cor(lossAversion_True, lossAversion_Final), cor = cor(pWeight_True, pWeight_Final)))
cors <- data.frame(parameter = c('Diminishing Sensitivity', 'Loss Aversion', 'Probability Weight'), Truth = round(cors, 2), xCoords = c(.9, 1.25, .95), yCoords = c(.1, 4.5, .5))
d %>%
mutate(id = 1:nrow(.)) %>%
gather(variable, value, lossAversion_True:pWeight_Final) %>%
separate(variable, c('parameter', 'boolean')) %>%
spread(boolean, value) %>%
rename(Truth = True) %>%
mutate(parameter = factor(parameter)) %>%
mutate(parameter = recode(parameter, 'lossAversion' = 'Loss Aversion', 'exponents' = 'Diminishing Sensitivity', 'pWeight' = 'Probability Weight')) %>%
ggplot(aes(x = Truth, y = Final)) +
geom_point() +
geom_smooth(method = 'lm', color = 'black') +
facet_wrap(~parameter, scales = 'free') +
geom_text(data = cors, aes(label = paste('r=', Truth, sep = ''), x = xCoords, y = yCoords), color = 'red', fontface='bold') +
xlab('True Parameter') +
ylab('Subject Parameter') +
theme_bw() +
theme(strip.background = element_rect(fill = 'white', color = 'black'))
library(tidyverse)
#exponentsRandom <- .2
exponentsRandom <- .42
lossAversionRandom <- .60
pWeightRandom <- .2
visualizeSubjectDifferences <- function(fixedEffect, effectName) {
## set the random effect in the environment
d <- data.frame(bias = seq(0, 1, .001))
d$trueParameter <- fixedEffect * convertBias(d$bias, fixedEffect)
d$finalParameter <- 0
subjectEffectName <- paste('subject', effectName, sep = '')
for (row in 1:nrow(d)) {
subjectProfile <- buildSubjectProfile()
if (effectName == 'LossAversion') {
d[row, 'finalParameter'] <- max(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
} else {
d[row, 'finalParameter'] <- max(min(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1), 0)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
}
}
return(data.frame(true = d$trueParameter, final = d$finalParameter))
}
fixedEffectContainer <- c(lossAversionFixed, exponentsFixed, pWeightFixed)
effectNameContainer <- c('LossAversion', 'Exponents', 'PWeight')
for (i in 1:3) {
if (i == 1) {
d <- visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i])
} else {
d <- cbind(d, visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i]))
}
}
colnames(d) <- c('lossAversion_True', 'lossAversion_Final', 'exponents_True', 'exponents_Final', 'pWeight_True', 'pWeight_Final')
cors <- with(d, c(cor = cor(exponents_True, exponents_Final), cor = cor(lossAversion_True, lossAversion_Final), cor = cor(pWeight_True, pWeight_Final)))
cors <- data.frame(parameter = c('Diminishing Sensitivity', 'Loss Aversion', 'Probability Weight'), Truth = round(cors, 2), xCoords = c(.9, 1.25, .95), yCoords = c(.1, 4.5, .5))
d %>%
mutate(id = 1:nrow(.)) %>%
gather(variable, value, lossAversion_True:pWeight_Final) %>%
separate(variable, c('parameter', 'boolean')) %>%
spread(boolean, value) %>%
rename(Truth = True) %>%
mutate(parameter = factor(parameter)) %>%
mutate(parameter = recode(parameter, 'lossAversion' = 'Loss Aversion', 'exponents' = 'Diminishing Sensitivity', 'pWeight' = 'Probability Weight')) %>%
ggplot(aes(x = Truth, y = Final)) +
geom_point() +
geom_smooth(method = 'lm', color = 'black') +
facet_wrap(~parameter, scales = 'free') +
geom_text(data = cors, aes(label = paste('r=', Truth, sep = ''), x = xCoords, y = yCoords), color = 'red', fontface='bold') +
xlab('True Parameter') +
ylab('Subject Parameter') +
theme_bw() +
theme(strip.background = element_rect(fill = 'white', color = 'black'))
library(tidyverse)
#exponentsRandom <- .2
exponentsRandom <- .42
lossAversionRandom <- .60
pWeightRandom <- .25
visualizeSubjectDifferences <- function(fixedEffect, effectName) {
## set the random effect in the environment
d <- data.frame(bias = seq(0, 1, .001))
d$trueParameter <- fixedEffect * convertBias(d$bias, fixedEffect)
d$finalParameter <- 0
subjectEffectName <- paste('subject', effectName, sep = '')
for (row in 1:nrow(d)) {
subjectProfile <- buildSubjectProfile()
if (effectName == 'LossAversion') {
d[row, 'finalParameter'] <- max(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
} else {
d[row, 'finalParameter'] <- max(min(fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName], 1), 0)
#d[row, 'finalParameter'] <- fixedEffect * convertBias(d[row,]$bias, fixedEffect) + subjectProfile[subjectEffectName]
}
}
return(data.frame(true = d$trueParameter, final = d$finalParameter))
}
fixedEffectContainer <- c(lossAversionFixed, exponentsFixed, pWeightFixed)
effectNameContainer <- c('LossAversion', 'Exponents', 'PWeight')
for (i in 1:3) {
if (i == 1) {
d <- visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i])
} else {
d <- cbind(d, visualizeSubjectDifferences(fixedEffectContainer[i], effectNameContainer[i]))
}
}
colnames(d) <- c('lossAversion_True', 'lossAversion_Final', 'exponents_True', 'exponents_Final', 'pWeight_True', 'pWeight_Final')
cors <- with(d, c(cor = cor(exponents_True, exponents_Final), cor = cor(lossAversion_True, lossAversion_Final), cor = cor(pWeight_True, pWeight_Final)))
cors <- data.frame(parameter = c('Diminishing Sensitivity', 'Loss Aversion', 'Probability Weight'), Truth = round(cors, 2), xCoords = c(.9, 1.25, .95), yCoords = c(.1, 4.5, .5))
d %>%
mutate(id = 1:nrow(.)) %>%
gather(variable, value, lossAversion_True:pWeight_Final) %>%
separate(variable, c('parameter', 'boolean')) %>%
spread(boolean, value) %>%
rename(Truth = True) %>%
mutate(parameter = factor(parameter)) %>%
mutate(parameter = recode(parameter, 'lossAversion' = 'Loss Aversion', 'exponents' = 'Diminishing Sensitivity', 'pWeight' = 'Probability Weight')) %>%
ggplot(aes(x = Truth, y = Final)) +
geom_point() +
geom_smooth(method = 'lm', color = 'black') +
facet_wrap(~parameter, scales = 'free') +
geom_text(data = cors, aes(label = paste('r=', Truth, sep = ''), x = xCoords, y = yCoords), color = 'red', fontface='bold') +
xlab('True Parameter') +
ylab('Subject Parameter') +
theme_bw() +
theme(strip.background = element_rect(fill = 'white', color = 'black'))
convertBias(1, 1)
convertBias(1, .5)
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
rc <- seq(0,16,.01)
sc <- c(rep(2, length(rc)). rep(4, length(rc)), rep(12, length(rc)), rep(14, length(rc))
d <- data.frame(riskyCritical = rep(rc, 4), safeCritical = sc)
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
sc <- c(rep(2, length(rc)), rep(4, length(rc)), rep(12, length(rc)), rep(14, length(rc))
sc <- c(rep(2, length(rc)), rep(4, length(rc)), rep(12, length(rc)), rep(14, length(rc)))
d <- data.frame(riskyCritical = rep(rc, 4), safeCritical = sc)
d$proba <- decision(riskyCritical = d$riskyCritical, safeCritical = d$safeCritical, bias = 1, subjectProfile = subjectProfile)
d %>%
ggplot(aes(x = riskyCritical, y = proba)) +
geom_line() +
facet_wrap(safeCritical) +
scale_x_continuous(labels = 0:16, breaks = 0:16)
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
## TRUE PARAMETERS
exponentsFixed <- 1
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
#pWeightFixed <- .7
#pWeightFixed <- .5
pWeightFixed <- .9
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions %>%
ggplot(aes(x = difficulty, y = proba, group = difference)) +
geom_bar(stat = 'identity', aes(fill = difference), position = position_dodge(width = .9)) +
ylim(0,1)
conditions
#exponentsFixed <- 1
#lossAversionFixed <- 2
lossAversionFixed <- 1
conditions$proba <- with(conditions, decision(riskyCritical = riskyCritical, safeCritical = safeCritical, bias = 1, subjectProfile = subjectProfile))
conditions
q()
