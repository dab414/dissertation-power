source('powerSimulator.r')
ls
ls()
d <- powerSimulator(n = 100, nSims = 1, threadId = 5)
d <- powerSimulator(n = 100, nSims = 1, threadId = 5, bias = .5)
d <- powerSimulator(n = 20, nSims = 1, threadId = 5, bias = .5)
d <- powerSimulator(n = 20, nSims = 2, threadId = 5, bias = .5)
source('hyperparameterTuning.r')
d <- exp1Power(nRange = 20, biasRange = 0.5, nSims = 1, threadId = 5)
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp1/runSimulation/powerSimulator.r')
d <- powerSimulator(n = 20, nSims = 1, threadId = 5, bias = .5)
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp1/runSimulation/powerSimulator.r')
d <- powerSimulator(n = 20, nSims = 1, threadId = 5, bias = .5)
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp1/runSimulation/powerSimulator.r')
d <- powerSimulator(n = 20, nSims = 1, threadId = 5, bias = .5)
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp1/runSimulation/powerSimulator.r')
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp1/runSimulation/powerSimulator.r')
d <- powerSimulator(n = 20, nSims = 1, threadId = 5, bias = .5)
convertBias <- function(bias, factorFixed) {
## This got super complicated but i'm pretty confident it works
## Check in the sketch book to see the crazy linear algebra
## Essentially, bias is theoretically sampled from a 0:1 parameter space, where 0 kills the effect and 1 gives it max strength
## I need to convert this bias to a new vector space with range (1/exponentsFixed):1 where (1/exponentsFixed) kills the effect and 1 gives it max strength
## note that (1/exponentsFixed):1 is actually max:min, thus the relationship between the theoretical new vector and the old one is r = -1
## validate this function with the plotting function below
biasVector <- seq(0,1,.001)
biasIndex <- which(biasVector %in% bias)
out <- -bias + (1/factorFixed)
out <- out * (seq(1/factorFixed, 1, length.out = length(biasVector))[biasIndex] / out)
return(out)
}
convertBias(.5, 5)
convertBias(.5, 2)
convertBias(.2, 2)
convertBias(.3, 2)
convertBias(.6, 2)
biasVector <- seq(0,1,.001)
bias <- .5
biasIndex <- which(biasVector %in% bias)
biasVector
out <- -bias + (1/factorFixed)
factorFixed <- 2
out <- -bias + (1/factorFixed)
out
d <- data.frame(x = seq(-.5,.5, .01))
nrow(d)
d <- data.frame(x = seq(-.5,.5, .001))
d$y <- convertBias(d$x, .3)
d$y <- convertBias(d$x, 2)
d <- data.frame(x = seq(0,1, .001))
d$y <- convertBias(d$x, 1/.3)
plot(D)
plot()
plot(d)
1/.3
d$y <- convertBias(d$x, .3)
plot(d)
d$y <- convertBias(d$x, 2)
plot(d)
biasVector <- seq(0,1,.001)
biasIndex <- which(biasVector %in% 0.5)
biasIndex
summary(d$x)
d$y <- convertBias(d$x, 2)
plot(d)
d <- data.frame(x = seq(0,1,.01))
d
d$y <-
(1/.3) - seq(1, (1/.3), length.out = length(d$x))
plot(d)
biasVector <- seq(0,1,.001)
factorFixed <- 2
yvector <- seq(1/factorFixed, 1, length.out = length(biasVector))
summary(yvector)
m1 <- lm(yvector ~ biasVector)
m1
0.5 + 0.5*.7
convertBias(.7, 2)
convertBias(.7, 3)
convertBias(.3, 3)
factorFixed <- 3
yvector <- seq(1/factorFixed, 1, length.out = length(biasVector))
m1 <- lm(yvector ~ biasVector)
m1
.33333 + .66666 * .3
m1$coefficients
m1$coefficients[1]
m1$coefficients$`(Intercept)`
m1$coefficients[1]+2
convertBias2 <- function(bias, factorFixed) {
biasVector <- seq(0,1,.001)
yvector <- seq(1/factorFixed, 1, length.out = length(biasVector))
m1 <- lm(yvector ~ biasVector)
return(m1$coefficients[1] + m1$coefficients[2] * bias)
}
convertBias(1, .3)
convertBias(.5, .3)
convertBias2(.5, .3)
convertBias2(.5, 2)
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp1/runSimulation/powerSimulator.r')
# convertBias <- function(bias, factorFixed) {
#   ## This got super complicated but i'm pretty confident it works
#   ## Check in the sketch book to see the crazy linear algebra
#   ## Essentially, bias is theoretically sampled from a 0:1 parameter space, where 0 kills the effect and 1 gives it max strength
#   ## I need to convert this bias to a new vector space with range (1/exponentsFixed):1 where (1/exponentsFixed) kills the effect and 1 gives it max strength
#   ## note that (1/exponentsFixed):1 is actually max:min, thus the relationship between the theoretical new vector and the old one is r = -1
#   ## validate this function with the plotting function below
#
#   biasVector <- seq(0,1,.001)
#   biasIndex <- which(biasVector %in% bias)
#   out <- -bias + (1/factorFixed)
#   out <- out * (seq(1/factorFixed, 1, length.out = length(biasVector))[biasIndex] / out)
#   return(out)
# }
d <- powerSimulator(100, .5, 1, 5)
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp1/runSimulation/powerSimulator.r')
source('~/OneDrive/Research/By Project/Dissertation/experiments/power/exp1/runSimulation/powerSimulator.r')
d <- powerSimulator(100, .5, 1, 5)
nrow(d)
head(d)
q()
