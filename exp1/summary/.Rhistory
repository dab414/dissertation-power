library(tidyverse)
d <- read.csv('powerAnalysis.csv')
d <- read.csv('../runSimulation/powerAnalysis.csv')
head(d)
install.packages("DT")
ls()
nrow(d)
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
library(DT)
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
d <- d %>%
filter(n == 100) %>%
select(bias, avgEffectSize) %>%
rename(effectCode = avgEffectSize) %>%
inner_join(d)
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size')
d[d$avgEffectSize == .1,]
print(colnames(d))
d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(power = mean(power))
d %>%
ggplot(aes(x = n, y = power)) %>%
geom_vline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2)
d %>%
ggplot(aes(x = n, y = power)) %>%
geom_vline(aes(yintercept = .8), linetype = 'dashed') %>%
geom_line(size = 2)
d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(power = mean(power))
d %>%
ggplot(aes(x = n, y = power)) %>%
geom_vline(aes(yintercept = .8), linetype = 'dashed') %>%
geom_line(size = 2)
d %>%
ggplot(aes(x = n, y = power)) +
geom_vline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2)
d %>%
ggplot(aes(x = n, y = power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2)
d <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(power = mean(power))
d %>%
ggplot(aes(x = n, y = power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2)
d %>%
ggplot(aes(x = n, y = power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
theme_bw()
d %>%
ggplot(aes(x = n, y = power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
theme_bw()
q()
library(tidyverse)
library(DT)
d <- read.csv('../runSimulation/powerAnalysis.csv')
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
library(tidyverse)
library(DT)
d <- read.csv('../runSimulation/powerAnalysis.csv')
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
d <- d %>%
filter(n == 100) %>%
select(bias, avgEffectSize) %>%
rename(effectCode = avgEffectSize) %>%
inner_join(d)
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size')
print(colnames(d))
d <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(power = mean(power))
d %>%
ggplot(aes(x = n, y = power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
theme_bw()
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size') + scale_fill_manual(name = 'Power')
library(tidyverse)
library(DT)
d <- read.csv('../runSimulation/powerAnalysis.csv')
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
d <- d %>%
filter(n == 100) %>%
select(bias, avgEffectSize) %>%
rename(effectCode = avgEffectSize) %>%
inner_join(d)
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size') + scale_fill_manual(name = 'Power')
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size') #+ scale_fill_manual(name = 'Power')
head(d)
colnames(d)[4] <- 'Power'
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size')
library(tidyverse)
library(DT)
d <- read.csv('../runSimulation/powerAnalysis.csv')
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
d <- d %>%
filter(n == 100) %>%
select(bias, avgEffectSize) %>%
rename(effectCode = avgEffectSize) %>%
inner_join(d)
head(d)
colnames(d)[4] <- 'Power'
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size')
head(d)
colnames(d)[4] <- 'Power'
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = Power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size')
colnames(d)[4] <- 'Power'
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = Power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size') + labs(caption = 'Each tile represents the power to detect an effect across 50 simulated experiments.')
d <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(power = mean(power))
d %>%
ggplot(aes(x = n, y = power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
annotate('text', x = 75, y = .75, label = '0.8 Power') +
theme_bw()
d <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(power = mean(power))
library(tidyverse)
library(DT)
d <- read.csv('../runSimulation/powerAnalysis.csv')
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
d <- d %>%
filter(n == 100) %>%
select(bias, avgEffectSize) %>%
rename(effectCode = avgEffectSize) %>%
inner_join(d)
colnames(d)[4] <- 'Power'
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = Power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size') + labs(caption = 'Each tile represents the power to detect an effect across 50 simulated experiments.')
dLine <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(power = mean(power))
dLine %>%
ggplot(aes(x = n, y = power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
#annotate('text', x = 75, y = .75, label = '0.8 Power') +
theme_bw()
dLine <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(Power = mean(Power))
dLine %>%
ggplot(aes(x = n, y = Power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
#annotate('text', x = 75, y = .75, label = '0.8 Power') +
theme_bw()
dLine <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(Power = mean(Power))
dLine %>%
ggplot(aes(x = n, y = Power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
annotate('text', x = 75, y = .75, label = '0.8 Power') +
theme_bw()
dLine %>%
filter(Power > .75 & Power < .85)
dLine %>%
ggplot(aes(x = n, y = Power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
annotate('text', x = 75, y = .75, label = '0.8 Power') +
annotate('text', x = 20, y = .85, label = '(30, .81') +
theme_bw()
dLine %>%
ggplot(aes(x = n, y = Power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
annotate('text', x = 75, y = .75, label = '0.8 Power') +
annotate('text', x = 20, y = .85, label = '(30, .81)') +
theme_bw()
dLine %>%
ggplot(aes(x = n, y = Power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
annotate('text', x = 75, y = .75, label = '0.8 Power') +
annotate('text', x = 20, y = .85, label = '(n = 30, power = .81)') +
theme_bw()
dLine %>%
ggplot(aes(x = n, y = Power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
annotate('text', x = 75, y = .75, label = '0.8 Power') +
annotate('text', x = 20, y = .87, label = '(n = 30, power = .81)') +
theme_bw()
head(d)
range(d$bias)
library(tidyverse)
library(DT)
d <- read.csv('../runSimulation/powerAnalysis.csv')
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
d <- d %>%
filter(n == 100) %>%
select(bias, avgEffectSize) %>%
rename(effectCode = avgEffectSize) %>%
inner_join(d)
colnames(d)[4] <- 'Power'
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = Power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size') + labs(caption = 'Each tile represents the power to detect an effect across 50 simulated experiments.')
dLine <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(Power = mean(Power))
dLine %>%
ggplot(aes(x = n, y = Power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
annotate('text', x = 75, y = .75, label = '0.8 Power') +
annotate('text', x = 20, y = .87, label = '(n = 30, power = .81)') +
theme_bw()
library(tidyverse)
library(DT)
d <- read.csv('../runSimulation/powerAnalysis.csv')
datatable(d, filter = 'top', options = list(pageLength = 5, autoWidth = TRUE))
d <- d %>%
filter(n == 100) %>%
select(bias, avgEffectSize) %>%
rename(effectCode = avgEffectSize) %>%
inner_join(d)
colnames(d)[4] <- 'Power'
d %>%
ggplot(aes(x = factor(n), y = factor(round(effectCode, 2)))) + geom_tile(aes(fill = Power), color = 'white') + scale_fill_gradient(low = 'steelblue', high = 'red') +
xlab('Sample Size') + ylab('Effect Size') + labs(caption = 'Each tile represents the power to detect an effect across 50 simulated experiments.')
dLine <- d %>%
filter(avgEffectSize >= .1 & avgEffectSize <= .2) %>%
group_by(n) %>%
summarize(Power = mean(Power))
dLine %>%
ggplot(aes(x = n, y = Power)) +
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
geom_line(size = 2) +
xlab('Sample Size') +
ylab('Power') +
labs(caption = 'Effect Size between 0.1 and 0.2') +
annotate('text', x = 75, y = .75, label = '0.8 Power') +
annotate('text', x = 20, y = .87, label = '(n = 30, power = .81)') +
theme_bw()
source('../runSimulation/powerSimulator.r')
d <- powerSimulator(n = 100, bias = 0.3, nSims = 1)
m1 <- ezANOVA(wid = subject, within = condition, dv = lowDemandSelection, data = d, detailed = TRUE)
effectSize <- m1$ANOVA$SSn[2] / (m1$ANOVA$SSn[2] + m1$ANOVA$SSd[2])
pValue <- m1$ANOVA$p[2]
print(m1$ANOVA[2,])
print(paste('Effect Size:', effectSize))
d %>%
#filter(condition == 'nearHigh' | condition == 'nearLow') %>%
group_by(subject, condition) %>%
summarize(lowDemandSelection = mean(lowDemandSelection)) %>%
group_by(condition) %>%
summarize(lds = mean(lowDemandSelection), se = sd(lowDemandSelection) / sqrt(n())) %>%
ggplot(aes(x = condition, y = lds)) + geom_bar(stat = 'identity', width = .7) + ylim(0,1) + geom_errorbar(aes(ymin = lds - se, ymax = lds + se), width = 0.5) +
ylim(0,1) +
theme_bw() #+
# theme(panel.grid.major = element_blank(), #panel.grid.minor = element_blank(),
#       axis.text.x = element_blank(),
#       axis.ticks = element_blank(),
#       axis.title.y = element_blank())
#ggsave('barPlot.png', width = 5.5, height = 3.5, units = 'in')
## subject lines
d %>%
# filter(condition == 'nearHigh' | condition == 'nearLow') %>%
filter(subject %in% 1:50) %>%
group_by(subject, condition) %>%
summarize(lds = mean(lowDemandSelection)) %>%
ggplot(aes(x = condition, y = lds)) + #geom_boxplot(width = .5, alpha = .5, fatten = NULL) +
#stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
# width = 0.5, size = 1, linetype = "solid") +
geom_line(aes(group = subject)) +
ylim(0,1) +
theme_bw() #+
# theme(panel.grid.major = element_blank(), #panel.grid.minor = element_blank(),
#       axis.text.x = element_blank(),
#       axis.ticks = element_blank(),
#       axis.title.y = element_blank())
#ggsave('boxPlot.png', width = 5.5, height = 3.5, units = 'in')
source('../runSimulation/powerSimulator.r')
d <- powerSimulator(n = 50, bias = 0.3, nSims = 1)
write.csv(d, 'markdownSimulation.csv', row.names = FALSE)
levels(d$condition)
50*3
m1
results <- paste('F(', m1$ANOVA$DFn[2], ', ', m1$ANOVA$DFd[2], ') = ', round(m1$ANOVA$F[2], 2), ', p = ', round(m1$ANOVA$p),2 )
results
results <- paste('F(', m1$ANOVA$DFn[2], ', ', m1$ANOVA$DFd[2], ') = ', round(m1$ANOVA$F[2], 2), ', p = ', round(m1$ANOVA$p), 2, sep = '')
results
results <- paste('F(', m1$ANOVA$DFn[2], ', ', m1$ANOVA$DFd[2], ') = ', round(m1$ANOVA$F[2], 2), ', p = ', round(m1$ANOVA$p[2], 2), sep = '')
results
results <- paste('F(', m1$ANOVA$DFn[2], ', ', m1$ANOVA$DFd[2], ') = ', round(m1$ANOVA$F[2], 2), ', p < .001', sep = '')
results
results <- c(results, paste(' Effect Size:', effectSize))
results
results <- paste('F(', m1$ANOVA$DFn[2], ', ', m1$ANOVA$DFd[2], ') = ', round(m1$ANOVA$F[2], 2), ', p < .001', sep = '')
results <- paste(results, 'Effect Size =', round(effectSize, 2))
results
results <- paste('F(', m1$ANOVA$DFn[2], ', ', m1$ANOVA$DFd[2], ') = ', round(m1$ANOVA$F[2], 2), ', p < .001', sep = '')
results <- paste(results, ', Effect Size = ', round(effectSize, 2), sep='')
results
q()
